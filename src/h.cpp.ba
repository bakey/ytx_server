#include "handle_funshion.h"
#include "utility_class.h"

handle_funshion::handle_funshion(xml_write_ptr ptr) {
	m_write_xml = ptr;
	m_proc_movie = m_proc_tv = m_proc_comic = 0;
}
handle_funshion::~handle_funshion() {
}
bool handle_funshion::handle_html(char *url, char *html) {
	if (url == NULL || html == NULL)
	{
		cerr << "invalid input params" << endl;
		return false;
	}

	if (!m_html_doc.html_read_mem(html, "utf-8"))
	{
		cout << "read html page failed ";
		return false;
	}
	html_node_ptr node = m_html_doc.html_xpath_node("//*[@id=\"media-crumbs\"]/a[1]");
	if ( node == NULL ) {
		return true;
	}
	string s = utility_c::trim( m_html_doc.html_node_value(node) );
	if ( s == "" ) {
		return true;
	}
    cout << s << endl;
	if ( s == "电影" ) {
		return handle_movie( url , html );
	}else {
		return handle_tv( url , html );
	}
	return true;
}
bool handle_funshion::write_time_and_area()
{
	html_node_ptr node = m_html_doc.html_xpath_node("//*[@id=\"title-overview\"]/div[4]/div[4]/span");
	if ( node != NULL ) {
		string str = utility_c::trim( m_html_doc.html_node_value(node) );
		if ( str != "" ) {
			vector<string> element;
			utility_c::split( str , ' ' , element );
			m_write_xml->write_node( "area" , element[1] );
			m_write_xml->write_release_time( element[0] );
			cout << element[0] << endl;
			cout << element[1] << endl;
		}
		
	}
}

bool handle_funshion::handle_movie(char *url, char *html) {
	/*m_write_xml->write_begin();
	html_node_ptr node = m_html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dd/p/a");
	if (node != NULL ) {
		m_write_xml->write_title( m_html_doc.html_node_value(node));
	}else {
		cerr << "get title failed : " << url << endl;
	}
	
	m_write_xml->write_node("category" , "电影");*/

	write_time_and_area();
	++ m_proc_movie;
	/*
	

	string director = "";
	node = html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dd/p[2]/span/a");
    bool add_separator = false;
    int director_cnt = 0;
	while ( node != NULL)
	{
        string tmp = html_doc.html_node_value(node);
        string s = utility_c::trim( tmp );
        if ( s != "") {
            if ( director_cnt > 0 ) {
                director += "/";
            }
		    director += s ;
            director_cnt ++;
        }
		node = html_doc.html_node_next( node );
	}
	if ( director != "" ) {
		m_write_xml->write_director( director );
	}else {
		cerr << "get director failed : " << url << endl;
	}
	
	if ((node = html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dd/p[4]/span")) != NULL)
	{
		m_write_xml->write_duration(html_doc.html_node_value(node));
	}else {
		cerr << "get duration failed : " << url << endl;
	}
	
	if ((node = html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dd/p[5]/span/a")) != NULL)
	{
		m_write_xml->write_countries(html_doc.html_node_value(node));
	} else {
		cerr << "get countries failed : " << url << endl;
	}
	
	if ((node = html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dd/p[7]/span/a")) != NULL)
	{
		m_write_xml->write_release_time(html_doc.html_node_value(node));
	} else {
		cerr << "get release time failed : " << url << endl;		
	}
	
	if ((node = html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dd/p[10]")) != NULL)
	{
		m_write_xml->write_description(html_doc.html_node_value(node));
	}else {
		cerr << "get description failed : " << url << endl;
	}
	
	if ((node = html_doc.html_xpath_node("/html/body/div[2]/div[2]/div/dl/dt/p[2]/a")) != NULL)
	{
		m_write_xml->write_seri_begin();
		m_write_xml->write_seri("0", html_doc.html_node_prop(node, "href"), "");
		m_write_xml->write_seri_end();
	}else {
		cerr << "get seri failed : " << url << endl;		
	}
	
	if ((node = html_doc.html_xpath_node("/html/body/div[3]/div/div/a/img")) != NULL)
	{
		m_write_xml->write_post(html_doc.html_node_prop(node, "src"));
	}else {
		cerr << "get post failed : " << url << endl;
	}
	
	
	m_write_xml->write_web_name("letv.com");
	
	int i = 0;
	bool is_first = true;
	char actor[800] = { 0 };
	for (i = 0; i < 100; i++)
	{
		char tmp[500] = { 0 };
		snprintf(tmp, sizeof(tmp) - 1, "/html/body/div[2]/div[2]/div/dl/dd/p[3]/a[%d]", i + 1);
		if ((node = html_doc.html_xpath_node(tmp)) != NULL)
		{
			if (!is_first)
			{
				snprintf(actor + strlen(actor), sizeof(actor) - strlen(actor) - 1, "/");
			}
			snprintf(actor + strlen(actor), sizeof(actor) - strlen(actor) - 1, "%s", 
					html_doc.html_node_value(node));
			is_first = false;
		}
		else
		{
			break;
		}
	}
	m_write_xml->write_actor(actor);
	
	m_write_xml->write_end();*/
}
bool handle_funshion::handle_tv(char *url, char *html) {
}





